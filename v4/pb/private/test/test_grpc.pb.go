// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.0
// source: v4/pb/private/test/test.proto

package test

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TestService_Unary_FullMethodName         = "/piotrkowalczuk.promgrpc.v4.test.TestService/Unary"
	TestService_ServerSide_FullMethodName    = "/piotrkowalczuk.promgrpc.v4.test.TestService/ServerSide"
	TestService_ClientSide_FullMethodName    = "/piotrkowalczuk.promgrpc.v4.test.TestService/ClientSide"
	TestService_Bidirectional_FullMethodName = "/piotrkowalczuk.promgrpc.v4.test.TestService/Bidirectional"
)

// TestServiceClient is the client API for TestService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestServiceClient interface {
	Unary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ServerSide(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_ServerSideClient, error)
	ClientSide(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientSideClient, error)
	Bidirectional(ctx context.Context, opts ...grpc.CallOption) (TestService_BidirectionalClient, error)
}

type testServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTestServiceClient(cc grpc.ClientConnInterface) TestServiceClient {
	return &testServiceClient{cc}
}

func (c *testServiceClient) Unary(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, TestService_Unary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testServiceClient) ServerSide(ctx context.Context, in *Request, opts ...grpc.CallOption) (TestService_ServerSideClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[0], TestService_ServerSide_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceServerSideClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TestService_ServerSideClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type testServiceServerSideClient struct {
	grpc.ClientStream
}

func (x *testServiceServerSideClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) ClientSide(ctx context.Context, opts ...grpc.CallOption) (TestService_ClientSideClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[1], TestService_ClientSide_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceClientSideClient{stream}
	return x, nil
}

type TestService_ClientSideClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type testServiceClientSideClient struct {
	grpc.ClientStream
}

func (x *testServiceClientSideClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceClientSideClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testServiceClient) Bidirectional(ctx context.Context, opts ...grpc.CallOption) (TestService_BidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &TestService_ServiceDesc.Streams[2], TestService_Bidirectional_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &testServiceBidirectionalClient{stream}
	return x, nil
}

type TestService_BidirectionalClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type testServiceBidirectionalClient struct {
	grpc.ClientStream
}

func (x *testServiceBidirectionalClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testServiceBidirectionalClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestServiceServer is the server API for TestService service.
// All implementations must embed UnimplementedTestServiceServer
// for forward compatibility
type TestServiceServer interface {
	Unary(context.Context, *Request) (*Response, error)
	ServerSide(*Request, TestService_ServerSideServer) error
	ClientSide(TestService_ClientSideServer) error
	Bidirectional(TestService_BidirectionalServer) error
	mustEmbedUnimplementedTestServiceServer()
}

// UnimplementedTestServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTestServiceServer struct {
}

func (UnimplementedTestServiceServer) Unary(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unary not implemented")
}
func (UnimplementedTestServiceServer) ServerSide(*Request, TestService_ServerSideServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerSide not implemented")
}
func (UnimplementedTestServiceServer) ClientSide(TestService_ClientSideServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientSide not implemented")
}
func (UnimplementedTestServiceServer) Bidirectional(TestService_BidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method Bidirectional not implemented")
}
func (UnimplementedTestServiceServer) mustEmbedUnimplementedTestServiceServer() {}

// UnsafeTestServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestServiceServer will
// result in compilation errors.
type UnsafeTestServiceServer interface {
	mustEmbedUnimplementedTestServiceServer()
}

func RegisterTestServiceServer(s grpc.ServiceRegistrar, srv TestServiceServer) {
	s.RegisterService(&TestService_ServiceDesc, srv)
}

func _TestService_Unary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServiceServer).Unary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TestService_Unary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServiceServer).Unary(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestService_ServerSide_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServiceServer).ServerSide(m, &testServiceServerSideServer{stream})
}

type TestService_ServerSideServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type testServiceServerSideServer struct {
	grpc.ServerStream
}

func (x *testServiceServerSideServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _TestService_ClientSide_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).ClientSide(&testServiceClientSideServer{stream})
}

type TestService_ClientSideServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type testServiceClientSideServer struct {
	grpc.ServerStream
}

func (x *testServiceClientSideServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceClientSideServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TestService_Bidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServiceServer).Bidirectional(&testServiceBidirectionalServer{stream})
}

type TestService_BidirectionalServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type testServiceBidirectionalServer struct {
	grpc.ServerStream
}

func (x *testServiceBidirectionalServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testServiceBidirectionalServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TestService_ServiceDesc is the grpc.ServiceDesc for TestService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TestService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "piotrkowalczuk.promgrpc.v4.test.TestService",
	HandlerType: (*TestServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Unary",
			Handler:    _TestService_Unary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerSide",
			Handler:       _TestService_ServerSide_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientSide",
			Handler:       _TestService_ClientSide_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Bidirectional",
			Handler:       _TestService_Bidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "v4/pb/private/test/test.proto",
}
